<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Brey Laude</title>
    <link>http://localhost:44953/tags/algorithm/</link>
    <description>Recent content in Algorithm on Brey Laude</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Aug 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:44953/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two Sum Problem</title>
      <link>http://localhost:44953/blog/2019-08-25-two-sum-problem/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:44953/blog/2019-08-25-two-sum-problem/</guid>
      <description>Problem Given an array(array) and a number(sum), find the two numbers from the array that sums up the given number.&#xA;Example: array : [1,2,6,5,8,9,17,10] , sum : 12&#xA;Answer for above example would be [2,10], if no such numbers found return [-1,-1].&#xA;The approach to solve the given problem is to loop through the given array twice and make a simple check. If the sum of the numbers (first &amp;amp; second loop) is equal to the given sum, the code snippet below will make it clearer.</description>
    </item>
    <item>
      <title>Kruskal Greedy algorithm for Minimum spanning tree</title>
      <link>http://localhost:44953/blog/2019-06-04-kruskal-greedy-algorithm-for-minimum-spanning-tree/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:44953/blog/2019-06-04-kruskal-greedy-algorithm-for-minimum-spanning-tree/</guid>
      <description>The code that follows was written before. To do it, I created a straightforward linked list + insert using a queued linked list and then sorting it was my original plan, but it proved to be too complicated.&#xA;Simply insert the sort so that the tail is very slight. It serves no purpose and, when used in the tree list, appears more NC. Actually, it is better to use heap or qsort after all input has been received, and to dynamically allocate enough space based on the input n.</description>
    </item>
  </channel>
</rss>
