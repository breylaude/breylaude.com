<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Brey Laude</title><link>https://breylaude.com/tags/c++/</link><description>Recent content in C++ on Brey Laude</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 24 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://breylaude.com/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Bipartite Graph</title><link>https://breylaude.com/blog/2019-09-24-bipartite-graph/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-09-24-bipartite-graph/</guid><description>&lt;p>Given an &lt;code>n + n&lt;/code> bipartite graph, each edge has &lt;code>p&lt;/code> base &lt;code>i&lt;/code>,&lt;code>j&lt;/code> &lt;code>p&lt;/code> base &lt;code>i&lt;/code>,&lt;code>j&lt;/code>. The probability of occurrence of, find the probability that has a perfect match.&lt;/p>
&lt;p>&lt;code>n ≤ 7,15s n ≤ 7,15s&lt;/code>&lt;/p>
&lt;p>Subtask: &lt;code>n ≤ 6,7s n ≤ 6,7s&lt;/code>&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Shape pressure, &lt;code>2^n&lt;/code> Bit represents point &lt;code>X&lt;/code> &lt;code>2^n 2^n&lt;/code>. Whether there is a perfect match for the subsets, each time the Y-square point is enumerated, a solution to the X-square point is connected.&lt;/p></description></item><item><title>2019 CTS</title><link>https://breylaude.com/blog/2019-09-03-2019-cts/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-09-03-2019-cts/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define int long long
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define debug(...) fprintf(stderr,__VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define DEBUG printf(&amp;#34;Passing [%s] in LINE %d\n&amp;#34;,__FUNCTION__,__LINE__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define Debug debug(&amp;#34;Passing [%s] in LINE %d\n&amp;#34;,__FUNCTION__,__LINE__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define all(x) x.begin(),x.end()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define x first
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define y second
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>using namespace std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> ll;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>,&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> pii;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1e-8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> pi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">acos&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">chkmin&lt;/span>(T &lt;span style="color:#f92672">&amp;amp;&lt;/span>a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a&lt;span style="color:#f92672">=&lt;/span>b,&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">chkmax&lt;/span>(T &lt;span style="color:#f92672">&amp;amp;&lt;/span>a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a&lt;span style="color:#f92672">=&lt;/span>b,&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">sqr&lt;/span>(T a){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">*&lt;/span>a;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">mmin&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a:b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">mmax&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a:b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">aabs&lt;/span>(T a){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">?-&lt;/span>a:a;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dcmp&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">cmp_a&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> x,&lt;span style="color:#66d9ef">int&lt;/span> y){&lt;span style="color:#66d9ef">return&lt;/span> a[x]&lt;span style="color:#f92672">&amp;lt;&lt;/span>a[y];}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define min mmin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define max mmax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define abs aabs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>namespace io {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> SIZE &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> ibuf[SIZE], &lt;span style="color:#f92672">*&lt;/span>iS, &lt;span style="color:#f92672">*&lt;/span>iT, obuf[SIZE], &lt;span style="color:#f92672">*&lt;/span>oS &lt;span style="color:#f92672">=&lt;/span> obuf, &lt;span style="color:#f92672">*&lt;/span>oT &lt;span style="color:#f92672">=&lt;/span> oS &lt;span style="color:#f92672">+&lt;/span> SIZE &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c, qu[&lt;span style="color:#ae81ff">55&lt;/span>]; &lt;span style="color:#66d9ef">int&lt;/span> f, qr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// getchar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// print the remaining part
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">flush&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span> (obuf, &lt;span style="color:#ae81ff">1&lt;/span>, oS &lt;span style="color:#f92672">-&lt;/span> obuf, stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oS &lt;span style="color:#f92672">=&lt;/span> obuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// putchar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>oS &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (oS &lt;span style="color:#f92672">==&lt;/span> oT) &lt;span style="color:#a6e22e">flush&lt;/span> ();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// input a signed integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>(); c &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) &lt;span style="color:#66d9ef">if&lt;/span> (c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>) f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(c&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; c &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>); x &lt;span style="color:#f92672">*=&lt;/span> f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>(); c &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) &lt;span style="color:#66d9ef">if&lt;/span> (c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>) f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(c&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; c &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>); x &lt;span style="color:#f92672">*=&lt;/span> f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x&lt;span style="color:#f92672">!=&lt;/span>EOF;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>())&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\r&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\r&amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>EOF))&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">++&lt;/span>x)&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> A,&lt;span style="color:#66d9ef">typename&lt;/span> ...B&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(A &lt;span style="color:#f92672">&amp;amp;&lt;/span>x,B &lt;span style="color:#f92672">&amp;amp;&lt;/span>...y){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(x)&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">read&lt;/span>(y...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// print a signed integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">signed&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>x) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>); &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>), x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (x) qu[&lt;span style="color:#f92672">++&lt;/span> qr] &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>, x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (qr) &lt;span style="color:#a6e22e">putc&lt;/span> (qu[qr &lt;span style="color:#f92672">--&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>x) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>); &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>), x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (x) qu[&lt;span style="color:#f92672">++&lt;/span> qr] &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>, x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (qr) &lt;span style="color:#a6e22e">putc&lt;/span> (qu[qr &lt;span style="color:#f92672">--&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">putc&lt;/span>(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x){&lt;span style="color:#a6e22e">putc&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x);&lt;span style="color:#f92672">++&lt;/span>x;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x){&lt;span style="color:#a6e22e">putc&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x);&lt;span style="color:#f92672">++&lt;/span>x;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> A,&lt;span style="color:#66d9ef">typename&lt;/span> ...B&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(A x,B ...y){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(x)&lt;span style="color:#f92672">||&lt;/span>&lt;span style="color:#a6e22e">write&lt;/span>(y...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//no need to call flush at the end manually!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> Flusher_ {&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">Flusher_&lt;/span>(){&lt;span style="color:#a6e22e">flush&lt;/span>();}}io_flusher_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> read;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> putc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> write;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> inf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> _init_{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_init_&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>inf,&lt;span style="color:#ae81ff">0x3f&lt;/span>,&lt;span style="color:#66d9ef">sizeof&lt;/span>(inf));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">998244353&lt;/span>,yg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>,ig&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">332748118&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> N&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>,M&lt;span style="color:#f92672">=&lt;/span>N&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> fac[&lt;span style="color:#ae81ff">200005&lt;/span>],inv[&lt;span style="color:#ae81ff">200005&lt;/span>],invf[&lt;span style="color:#ae81ff">200005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">fpm&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a,&lt;span style="color:#66d9ef">int&lt;/span> b){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)a&lt;span style="color:#f92672">+=&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> c&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(;b;b&lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">%&lt;/span>p)&lt;span style="color:#66d9ef">if&lt;/span>(b&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)c&lt;span style="color:#f92672">=&lt;/span>c&lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> rev[M],f[M],g[M],h[M],s[M],t[M];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">NTT&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a,&lt;span style="color:#66d9ef">int&lt;/span> n,&lt;span style="color:#66d9ef">int&lt;/span> flg){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rev[i]&lt;span style="color:#f92672">=&lt;/span>(rev[i&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">|&lt;/span>((i&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>(n&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>rev[i])&lt;span style="color:#a6e22e">swap&lt;/span>(a[i],a[rev[i]]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;i&lt;span style="color:#f92672">&amp;lt;&amp;lt;=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(flg&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">?&lt;/span>yg:ig,(p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)),ww;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;j&lt;span style="color:#f92672">+=&lt;/span>i&lt;span style="color:#f92672">+&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ww&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> k&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;k&lt;span style="color:#f92672">&amp;lt;&lt;/span>i;&lt;span style="color:#f92672">++&lt;/span>k){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> u&lt;span style="color:#f92672">=&lt;/span>a[j&lt;span style="color:#f92672">+&lt;/span>k],v&lt;span style="color:#f92672">=&lt;/span>a[j&lt;span style="color:#f92672">+&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a[j&lt;span style="color:#f92672">+&lt;/span>k]&lt;span style="color:#f92672">=&lt;/span>(u&lt;span style="color:#f92672">+&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>v)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a[j&lt;span style="color:#f92672">+&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>((u&lt;span style="color:#f92672">-&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>v)&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">+&lt;/span>p)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ww&lt;span style="color:#f92672">=&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>w&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(flg&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(n,p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;&lt;span style="color:#f92672">++&lt;/span>i)a[i]&lt;span style="color:#f92672">=&lt;/span>a[i]&lt;span style="color:#f92672">*&lt;/span>w&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a,&lt;span style="color:#66d9ef">int&lt;/span> b){&lt;span style="color:#66d9ef">return&lt;/span> fac[a]&lt;span style="color:#f92672">*&lt;/span>invf[b]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[a&lt;span style="color:#f92672">-&lt;/span>b]&lt;span style="color:#f92672">%&lt;/span>p;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef QAQAutoMaton 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">freopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pearl.in&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>,stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">freopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pearl.out&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>,stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> d,n,m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">read&lt;/span>(d,n,m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(n&lt;span style="color:#f92672">-&lt;/span>m&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;0&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> XD&lt;span style="color:#f92672">=&lt;/span>d&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fac[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>fac[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>inv[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>invf[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>invf[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>XD;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fac[i]&lt;span style="color:#f92672">=&lt;/span>fac[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>i&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inv[i]&lt;span style="color:#f92672">=&lt;/span>(p&lt;span style="color:#f92672">-&lt;/span>p&lt;span style="color:#f92672">/&lt;/span>i)&lt;span style="color:#f92672">*&lt;/span>inv[p&lt;span style="color:#f92672">%&lt;/span>i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invf[i]&lt;span style="color:#f92672">=&lt;/span>inv[i]&lt;span style="color:#f92672">*&lt;/span>invf[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>(n&lt;span style="color:#f92672">-&lt;/span>m&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[d&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>invf[d&lt;span style="color:#f92672">-&lt;/span>i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i)g[i]&lt;span style="color:#f92672">=&lt;/span>invf[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(h,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i){g[i]&lt;span style="color:#f92672">=&lt;/span>g[i]&lt;span style="color:#f92672">*&lt;/span>h[i]&lt;span style="color:#f92672">%&lt;/span>p;h[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[i]&lt;span style="color:#f92672">=&lt;/span>g[d&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">*&lt;/span>fac[d]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#f92672">=&lt;/span>x&lt;span style="color:#f92672">*&lt;/span>(p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)g[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i2&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>,p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i)s[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>(s[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">+&lt;/span>h[i])&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#f92672">++&lt;/span>i){h[i]&lt;span style="color:#f92672">=&lt;/span>h[i]&lt;span style="color:#f92672">*&lt;/span>invf[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">%&lt;/span>p;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>XD;&lt;span style="color:#f92672">++&lt;/span>i)g[XD&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>fac[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(h,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)f[i]&lt;span style="color:#f92672">=&lt;/span>h[i]&lt;span style="color:#f92672">*&lt;/span>g[i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(f,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> ans&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s[i]&lt;span style="color:#f92672">=&lt;/span>f[XD&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>(i&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">?&lt;/span>p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">C&lt;/span>(d,i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(s,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(t,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)f[i]&lt;span style="color:#f92672">=&lt;/span>s[i]&lt;span style="color:#f92672">*&lt;/span>t[i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(f,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#f92672">=&lt;/span>(ans&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(i&lt;span style="color:#f92672">+&lt;/span>i&lt;span style="color:#f92672">-&lt;/span>d,n)&lt;span style="color:#f92672">*&lt;/span>f[i])&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#f92672">=&lt;/span>ans&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(i2,d)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">write&lt;/span>(ans,&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Strange thing about Clang/GCC</title><link>https://breylaude.com/blog/2018-06-05-strange-thing-about-clang/gcc/</link><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-06-05-strange-thing-about-clang/gcc/</guid><description>&lt;p>Consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;type_traits&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// base template
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;T&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// specialization 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T, &lt;span style="color:#66d9ef">size_t&lt;/span> N&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>T[N]&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;T[&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> N &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// specialization 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int[0]&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x[] &lt;span style="color:#f92672">=&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">remove_reference_t&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">decltype&lt;/span>(x)&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>()();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Difficulties with C++ Lambdas</title><link>https://breylaude.com/blog/2018-06-02-difficulties-with-c-lambdas/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-06-02-difficulties-with-c-lambdas/</guid><description>&lt;p>C++ lambdas are wonderful for all sorts of reasons (especially with their C++14-and-beyond power). But I’ve run into a problem that I can’t think of a good way around yet.&lt;/p>
&lt;p>If you are familiar with C++, you are aware of the importance of move semantics and rvalue references. Currently, a plethora of blog posts, conference videos, and even books explain how they operate, as well as how forwarding references (previously called universal references) combine with std::forward and templates to offer nice, optimal handling of objects with move semantics.&lt;/p></description></item><item><title>Recursive lambdas</title><link>https://breylaude.com/blog/2018-05-21-recursive-lambdas/</link><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-05-21-recursive-lambdas/</guid><description>&lt;p>One can assign a lambda to auto or to &lt;code>std::function&lt;/code>. Normally one would assign a lambda to auto to avoid possible unwanted allocation from &lt;code>std::function&lt;/code>. But if you want recursion, you need to be able to refer to the lambda variable inside the lambda, and you can’t do that if it’s assigned to auto. So how do you do recursive lambdas without using &lt;code>std::function&lt;/code>?&lt;/p>
&lt;p>Use a fixed-point combinator (y-combinator) of course.&lt;/p></description></item><item><title>Google Code Jam 2018</title><link>https://breylaude.com/blog/2018-04-27-google-code-jam-2018/</link><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-04-27-google-code-jam-2018/</guid><description>&lt;p>Codejam is using a different system and rules than before. I&amp;rsquo;m not sure if I want to participate in the contest. I know how to solve problem A , but I can&amp;rsquo;t find a vital bit of info about the new rules like the CPU of the servers where the codes are supposed to run.&lt;/p>
&lt;p>However, this suspiciously sound like one of those badly made ACM contests.&lt;/p>
&lt;p>I no longer have so much free time as before. I barely have time in the weekends to rest. So a Saturday is not something I can just spend in some contest if it doesn&amp;rsquo;t sound at least a bit challenging. And the prizes are as low as ever. I decide that atleast for Friday I&amp;rsquo;m not gonna bother.&lt;/p></description></item><item><title>C++ Tuples missing functionality</title><link>https://breylaude.com/blog/2018-04-16-c-tuples-missing-functionality/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-04-16-c-tuples-missing-functionality/</guid><description>&lt;p>C++ provides a strange mix of compile-time and runtime functionality for dealing with tuples. There are some interesting parts, like &lt;code>std::tie&lt;/code> to destructure a tuple, and &lt;code>std::tuple_cat&lt;/code> to join together several tuples into one.&lt;/p>
&lt;p>So there is evidence that the standard has been influenced by some functional programming ideas, but I don’t think the full power of tuples has been realized (in both senses), and I found myself thinking about some missing parts.&lt;/p></description></item></channel></rss>