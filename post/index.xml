<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Brey Laude</title><link>https://breylaude.com/post/</link><description>Recent content in Posts on Brey Laude</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://breylaude.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Real Programming - Tutorial</title><link>https://breylaude.com/blog/2024-08-17-real-programming-tutorial/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2024-08-17-real-programming-tutorial/</guid><description>&lt;p>I was watching some random finance lectures and it gave lectures with a list of financial advice and it starts out by &lt;em>&amp;ldquo;What is finance&amp;rdquo;&lt;/em>, breakdown into two things, if you want to get into it you have a choice, you can either invest your own money or other people&amp;rsquo;s money - investing your own money probably only makes sense if you have a lot of it, you need tools to, like there&amp;rsquo;s no reason you should be investing your money if somebody else can invest it better. Basically good advice so I thought I&amp;rsquo;d do something similar for programming.&lt;/p></description></item><item><title>Quick update</title><link>https://breylaude.com/blog/2024-05-04-quick-update/</link><pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2024-05-04-quick-update/</guid><description>&lt;p>Slowly getting my life together and the time and ability to tackle projects. Hopefully some new technical stuff soon.&lt;/p>
&lt;p>Switched from NGINX to Apache2 for the website. Redirect to SSL should be universal now.&lt;/p>
&lt;p>Let me know if you have any issues.&lt;/p></description></item><item><title>May can officially suck</title><link>https://breylaude.com/blog/2024-04-29-may-can-officially-suck/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2024-04-29-may-can-officially-suck/</guid><description>&lt;p>A terrible, terrible month for me on many fronts. However, I&amp;rsquo;m still here, still on board, and still not under indictment (that I know of). April will be better for me or I will set it on fire.&lt;/p>
&lt;p>The time has come to move hosts. I&amp;rsquo;m now on a VPS that allows me the ability to do things like, offer SSL by default for free on my site, credits to where credits are due.&lt;/p></description></item><item><title>Source code for 2020+ Subaru head units and other core functionality</title><link>https://breylaude.com/blog/2023-11-27-source-code-for-2020-subaru-head-units-and-other-core-functionality/</link><pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2023-11-27-source-code-for-2020-subaru-head-units-and-other-core-functionality/</guid><description>&lt;p>Many modules written and others since other car manufacturers share the same code base. You can also find Toyota version as well.&lt;/p>
&lt;p>I found it a year ago, made minor modifications and compiled successfully. However, to get it deployed is another large task which I didn’t follow through with, there are probably people who have done so already, I am not sure.&lt;/p>
&lt;p>Send me an email if you do. Cheers!&lt;/p></description></item><item><title>Overstimulation rant</title><link>https://breylaude.com/blog/2023-09-15-overstimulation-rant/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2023-09-15-overstimulation-rant/</guid><description>&lt;p>Sometimes, things get just a little too much, and it seems like there&amp;rsquo;s nothing I can do and it all just weighs in. I think, personally, this is in part due three things, of which we shall explore, make valid and informed points about, rant vaguely until I run out of things to say.&lt;/p>
&lt;h2 id="advertising">Advertising&lt;/h2>
&lt;p>This is the big one, and It&amp;rsquo;s absolutely everywhere&lt;/p>
&lt;p>Every store everywhere is basically the equivalent of the old EB games joke about needing a machete to get through the banners advertising sales.&lt;/p></description></item><item><title>styled-components</title><link>https://breylaude.com/blog/2023-05-27-styled-components/</link><pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2023-05-27-styled-components/</guid><description>&lt;p>This current trend in the web development industry, is probably familiar to you.&lt;/p>
&lt;p>But pardon my skepticism, because I can’t help but wonder, is it really THAT groundbreaking?&lt;/p>
&lt;p>The core idea behind Styled Components is to remove the ‘cascade’ from CSS.&lt;/p>
&lt;p>And I know, cascading styles can be a headache. But, does eradicating this cascade lead to better, more maintainable designs? Fucking color me skeptical.&lt;/p></description></item><item><title>Normal Form Designators</title><link>https://breylaude.com/blog/2023-04-12-normal-form-designators/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2023-04-12-normal-form-designators/</guid><description>&lt;p>&lt;em>Brian Cantwell Smith&lt;/em> is one of the many people who are far smarter than I am.&lt;/p>
&lt;p>Their 
&lt;a href="https://publications.csail.mit.edu/lcs/pubs/pdf/MIT-LCS-TR-272.pdf" target="_blank" rel="noopener">MIT thesis Procedural Reflection in Programming Languages&lt;/a>, which is something else, is how I first became aware of them.&lt;/p>
&lt;p>As usual, I learned the concepts presented in this post from the aforementioned paper. As such, I&amp;rsquo;m not sure if I should give credit to Brian for these concepts, but I will since I&amp;rsquo;m not sure to whom to give credit otherwise.&lt;/p></description></item><item><title>Performance testing runs too short</title><link>https://breylaude.com/blog/2023-04-11-performance-testing-runs-too-short/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2023-04-11-performance-testing-runs-too-short/</guid><description>&lt;p>You’ll probably notice that performance testing costs a lot of time to run one case. Moreover, it carries the risk of failing the execution itself.&lt;/p>
&lt;p>Furthermore, fixes to eliminate bottlenecks found in performance testing are often far more expensive than functional fixes.&lt;/p>
&lt;p>I don’t know if it’s because there are few people who know this reality, or because the emphasis is on functionality, but in most cases, the performance test period is quite short.&lt;/p></description></item><item><title>Computers</title><link>https://breylaude.com/blog/2022-03-12-computers/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2022-03-12-computers/</guid><description>&lt;blockquote>
&lt;p>I do not step shyly back from your stack, but look upon it always as my stack, in which I respect nothing.&lt;/p>
&lt;/blockquote>
&lt;p>Where did we go wrong? Accidentally discovering and rediscovering the joy of computing, and ending up with what we have, instead?&lt;/p>
&lt;p>All tech stacks and standards are spooks in the spookiest sense of the word, and any grand idea of what a computer aught to be is inseparable from the ramblings of a god-fearing human, or an appeal to societal norm, or the allure of the athiest god in scientus&lt;/p></description></item><item><title>About Agile</title><link>https://breylaude.com/blog/2022-02-18-about-agile/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2022-02-18-about-agile/</guid><description>&lt;p>A friend of mine we often talk about software design. He&amp;rsquo;s skeptic about Agile Software Design, calling it &lt;em>“software design by trial and error”&lt;/em>.&lt;/p>
&lt;p>I share his criticism.&lt;/p>
&lt;p>Yesterday I took a two-hour LinkedIn Learning class on Agile Software Design. It was an introduction only. My first impression is that Agile is, at one level, moving a to-do list of sticky notes around on a bulletin board, assigning programming tasks to the programming team with verbal instructions and discussion about how to program something.&lt;/p></description></item><item><title>My favorite programming pattern</title><link>https://breylaude.com/blog/2022-01-18-my-favorite-programming-pattern/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2022-01-18-my-favorite-programming-pattern/</guid><description>&lt;p>So at work we were talking about interviewer questions for graduates, and one of them was the standard simple test to weed out graduates who faked it till they made it. it went something like this:&lt;/p>
&lt;blockquote>
&lt;p>You are given a list of characters, please return the list with commas seperating each element. do not leave a trailing comma.&lt;/p>
&lt;/blockquote>
&lt;p>There may have been language restrictions or something, honestly I wasn&amp;rsquo;t paying a huge amount of attention, but it got me thinking about my honest answer to that, and here is what I came up with.&lt;/p></description></item><item><title>Help wanted - Programmer for Startup</title><link>https://breylaude.com/blog/2021-04-12-help-wanted-programmer-for-startup/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2021-04-12-help-wanted-programmer-for-startup/</guid><description>&lt;p>Are you a good programmer? Willing to join a small startup? Think you can get along with me?&lt;/p>
&lt;p>We&amp;rsquo;re looking people to our startup if it gets funded, possibly as a co-founder.&lt;/p>
&lt;p>We&amp;rsquo;re building something great!&lt;/p>
&lt;p>Email me: 
&lt;a href="mailto:startup@breylaude.com">startup@breylaude.com&lt;/a>&lt;/p></description></item><item><title>Shortcodes In Action</title><link>https://breylaude.com/blog/2021-02-14-shortcodes-in-action/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2021-02-14-shortcodes-in-action/</guid><description>&lt;p>The theme&amp;rsquo;s short codes in action. See my shortcode repository at

&lt;a href="https://github.com/parsiya/Hugo-Shortcodes" target="_blank" rel="noopener">https://github.com/parsiya/Hugo-Shortcodes&lt;/a> for more.&lt;/p></description></item><item><title>Limits of Mathematics</title><link>https://breylaude.com/blog/2020-01-07-limits-of-mathematics/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2020-01-07-limits-of-mathematics/</guid><description>&lt;p>In order for any complexity to arise in any system there simply must exist fundamental relationships. Mathematics is, of course, the language of relationships. The complexity of our universe necessarily arises out of mathematical relationships, however our universe is comprised of more than relationships; its structure extends beyond the realms of math.&lt;/p>
&lt;p>&lt;em>The Copenhagen Interpretation of Quantum Mechanics&lt;/em>, Holographic Universe principals, and all other notions akin to “all properties of the universe are mathematical in nature” display profound misunderstandings about the capacity and nature of mathematics, as well as its relationship to physics. Such musings are novel but it’s not physics; it’s rhetoric, intractable abstraction. Mathematics is an expression &lt;em>indulgence&lt;/em> of relationships.&lt;/p></description></item><item><title>Bipartite Graph</title><link>https://breylaude.com/blog/2019-09-24-bipartite-graph/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-09-24-bipartite-graph/</guid><description>&lt;p>Given an &lt;code>n + n&lt;/code> bipartite graph, each edge has &lt;code>p&lt;/code> base &lt;code>i&lt;/code>,&lt;code>j&lt;/code> &lt;code>p&lt;/code> base &lt;code>i&lt;/code>,&lt;code>j&lt;/code>. The probability of occurrence of, find the probability that has a perfect match.&lt;/p>
&lt;p>&lt;code>n ≤ 7,15s n ≤ 7,15s&lt;/code>&lt;/p>
&lt;p>Subtask: &lt;code>n ≤ 6,7s n ≤ 6,7s&lt;/code>&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Shape pressure, &lt;code>2^n&lt;/code> Bit represents point &lt;code>X&lt;/code> &lt;code>2^n 2^n&lt;/code>. Whether there is a perfect match for the subsets, each time the Y-square point is enumerated, a solution to the X-square point is connected.&lt;/p></description></item><item><title>2019 CTS</title><link>https://breylaude.com/blog/2019-09-03-2019-cts/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-09-03-2019-cts/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define int long long
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define debug(...) fprintf(stderr,__VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define DEBUG printf(&amp;#34;Passing [%s] in LINE %d\n&amp;#34;,__FUNCTION__,__LINE__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define Debug debug(&amp;#34;Passing [%s] in LINE %d\n&amp;#34;,__FUNCTION__,__LINE__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define all(x) x.begin(),x.end()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define x first
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define y second
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>using namespace std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> ll;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>,&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> pii;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1e-8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> pi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">acos&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">chkmin&lt;/span>(T &lt;span style="color:#f92672">&amp;amp;&lt;/span>a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a&lt;span style="color:#f92672">=&lt;/span>b,&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">chkmax&lt;/span>(T &lt;span style="color:#f92672">&amp;amp;&lt;/span>a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a&lt;span style="color:#f92672">=&lt;/span>b,&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">sqr&lt;/span>(T a){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">*&lt;/span>a;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">mmin&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a:b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">mmax&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b&lt;span style="color:#f92672">?&lt;/span>a:b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>T &lt;span style="color:#a6e22e">aabs&lt;/span>(T a){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">?-&lt;/span>a:a;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>class T&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dcmp&lt;/span>(T a,T b){&lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">&amp;gt;&lt;/span>b;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">cmp_a&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> x,&lt;span style="color:#66d9ef">int&lt;/span> y){&lt;span style="color:#66d9ef">return&lt;/span> a[x]&lt;span style="color:#f92672">&amp;lt;&lt;/span>a[y];}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define min mmin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define max mmax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define abs aabs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>namespace io {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> SIZE &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> ibuf[SIZE], &lt;span style="color:#f92672">*&lt;/span>iS, &lt;span style="color:#f92672">*&lt;/span>iT, obuf[SIZE], &lt;span style="color:#f92672">*&lt;/span>oS &lt;span style="color:#f92672">=&lt;/span> obuf, &lt;span style="color:#f92672">*&lt;/span>oT &lt;span style="color:#f92672">=&lt;/span> oS &lt;span style="color:#f92672">+&lt;/span> SIZE &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c, qu[&lt;span style="color:#ae81ff">55&lt;/span>]; &lt;span style="color:#66d9ef">int&lt;/span> f, qr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// getchar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// print the remaining part
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">flush&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span> (obuf, &lt;span style="color:#ae81ff">1&lt;/span>, oS &lt;span style="color:#f92672">-&lt;/span> obuf, stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oS &lt;span style="color:#f92672">=&lt;/span> obuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// putchar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>oS &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (oS &lt;span style="color:#f92672">==&lt;/span> oT) &lt;span style="color:#a6e22e">flush&lt;/span> ();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// input a signed integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>(); c &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) &lt;span style="color:#66d9ef">if&lt;/span> (c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>) f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(c&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; c &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>); x &lt;span style="color:#f92672">*=&lt;/span> f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>(); c &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) &lt;span style="color:#66d9ef">if&lt;/span> (c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>) f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(c&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; c &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>; c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">gc&lt;/span>()) x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>); x &lt;span style="color:#f92672">*=&lt;/span> f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x&lt;span style="color:#f92672">!=&lt;/span>EOF;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>())&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\r&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>EOF)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\r&amp;#39;&lt;/span>&lt;span style="color:#f92672">||*&lt;/span>x&lt;span style="color:#f92672">==&lt;/span>EOF))&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">++&lt;/span>x)&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">gc&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> A,&lt;span style="color:#66d9ef">typename&lt;/span> ...B&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(A &lt;span style="color:#f92672">&amp;amp;&lt;/span>x,B &lt;span style="color:#f92672">&amp;amp;&lt;/span>...y){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(x)&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">read&lt;/span>(y...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// print a signed integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">signed&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>x) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>); &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>), x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (x) qu[&lt;span style="color:#f92672">++&lt;/span> qr] &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>, x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (qr) &lt;span style="color:#a6e22e">putc&lt;/span> (qu[qr &lt;span style="color:#f92672">--&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>x) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>); &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">putc&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>), x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (x) qu[&lt;span style="color:#f92672">++&lt;/span> qr] &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>, x &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (qr) &lt;span style="color:#a6e22e">putc&lt;/span> (qu[qr &lt;span style="color:#f92672">--&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">putc&lt;/span>(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x){&lt;span style="color:#a6e22e">putc&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x);&lt;span style="color:#f92672">++&lt;/span>x;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x){&lt;span style="color:#a6e22e">putc&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>x);&lt;span style="color:#f92672">++&lt;/span>x;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> A,&lt;span style="color:#66d9ef">typename&lt;/span> ...B&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(A x,B ...y){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(x)&lt;span style="color:#f92672">||&lt;/span>&lt;span style="color:#a6e22e">write&lt;/span>(y...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//no need to call flush at the end manually!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> Flusher_ {&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">Flusher_&lt;/span>(){&lt;span style="color:#a6e22e">flush&lt;/span>();}}io_flusher_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> read;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> putc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>using io &lt;span style="color:#f92672">::&lt;/span> write;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> inf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> _init_{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_init_&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>inf,&lt;span style="color:#ae81ff">0x3f&lt;/span>,&lt;span style="color:#66d9ef">sizeof&lt;/span>(inf));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">998244353&lt;/span>,yg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>,ig&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">332748118&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> N&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>,M&lt;span style="color:#f92672">=&lt;/span>N&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> fac[&lt;span style="color:#ae81ff">200005&lt;/span>],inv[&lt;span style="color:#ae81ff">200005&lt;/span>],invf[&lt;span style="color:#ae81ff">200005&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">fpm&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a,&lt;span style="color:#66d9ef">int&lt;/span> b){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(a&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)a&lt;span style="color:#f92672">+=&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> c&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(;b;b&lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,a&lt;span style="color:#f92672">=&lt;/span>a&lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">%&lt;/span>p)&lt;span style="color:#66d9ef">if&lt;/span>(b&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)c&lt;span style="color:#f92672">=&lt;/span>c&lt;span style="color:#f92672">*&lt;/span>a&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> rev[M],f[M],g[M],h[M],s[M],t[M];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">NTT&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a,&lt;span style="color:#66d9ef">int&lt;/span> n,&lt;span style="color:#66d9ef">int&lt;/span> flg){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rev[i]&lt;span style="color:#f92672">=&lt;/span>(rev[i&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">|&lt;/span>((i&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>(n&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&lt;/span>rev[i])&lt;span style="color:#a6e22e">swap&lt;/span>(a[i],a[rev[i]]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;i&lt;span style="color:#f92672">&amp;lt;&amp;lt;=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(flg&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">?&lt;/span>yg:ig,(p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>(i&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)),ww;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;j&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;j&lt;span style="color:#f92672">+=&lt;/span>i&lt;span style="color:#f92672">+&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ww&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> k&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;k&lt;span style="color:#f92672">&amp;lt;&lt;/span>i;&lt;span style="color:#f92672">++&lt;/span>k){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> u&lt;span style="color:#f92672">=&lt;/span>a[j&lt;span style="color:#f92672">+&lt;/span>k],v&lt;span style="color:#f92672">=&lt;/span>a[j&lt;span style="color:#f92672">+&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a[j&lt;span style="color:#f92672">+&lt;/span>k]&lt;span style="color:#f92672">=&lt;/span>(u&lt;span style="color:#f92672">+&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>v)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a[j&lt;span style="color:#f92672">+&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>((u&lt;span style="color:#f92672">-&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>v)&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">+&lt;/span>p)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ww&lt;span style="color:#f92672">=&lt;/span>ww&lt;span style="color:#f92672">*&lt;/span>w&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(flg&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(n,p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;&lt;span style="color:#f92672">++&lt;/span>i)a[i]&lt;span style="color:#f92672">=&lt;/span>a[i]&lt;span style="color:#f92672">*&lt;/span>w&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a,&lt;span style="color:#66d9ef">int&lt;/span> b){&lt;span style="color:#66d9ef">return&lt;/span> fac[a]&lt;span style="color:#f92672">*&lt;/span>invf[b]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[a&lt;span style="color:#f92672">-&lt;/span>b]&lt;span style="color:#f92672">%&lt;/span>p;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef QAQAutoMaton 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">freopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pearl.in&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>,stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">freopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pearl.out&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>,stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> d,n,m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">read&lt;/span>(d,n,m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(n&lt;span style="color:#f92672">-&lt;/span>m&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;0&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> XD&lt;span style="color:#f92672">=&lt;/span>d&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fac[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>fac[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>inv[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>invf[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>invf[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>XD;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fac[i]&lt;span style="color:#f92672">=&lt;/span>fac[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>i&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inv[i]&lt;span style="color:#f92672">=&lt;/span>(p&lt;span style="color:#f92672">-&lt;/span>p&lt;span style="color:#f92672">/&lt;/span>i)&lt;span style="color:#f92672">*&lt;/span>inv[p&lt;span style="color:#f92672">%&lt;/span>i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invf[i]&lt;span style="color:#f92672">=&lt;/span>inv[i]&lt;span style="color:#f92672">*&lt;/span>invf[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> w&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>(n&lt;span style="color:#f92672">-&lt;/span>m&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[d&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>invf[d&lt;span style="color:#f92672">-&lt;/span>i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i)g[i]&lt;span style="color:#f92672">=&lt;/span>invf[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(h,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i){g[i]&lt;span style="color:#f92672">=&lt;/span>g[i]&lt;span style="color:#f92672">*&lt;/span>h[i]&lt;span style="color:#f92672">%&lt;/span>p;h[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[i]&lt;span style="color:#f92672">=&lt;/span>g[d&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">*&lt;/span>fac[d]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>x&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#f92672">=&lt;/span>x&lt;span style="color:#f92672">*&lt;/span>(p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)g[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i2&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>,p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w;&lt;span style="color:#f92672">++&lt;/span>i)s[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>(s[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">+&lt;/span>h[i])&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>w&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#f92672">++&lt;/span>i){h[i]&lt;span style="color:#f92672">=&lt;/span>h[i]&lt;span style="color:#f92672">*&lt;/span>invf[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">%&lt;/span>p;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>XD;&lt;span style="color:#f92672">++&lt;/span>i)g[XD&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">=&lt;/span>fac[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(h,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(g,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)f[i]&lt;span style="color:#f92672">=&lt;/span>h[i]&lt;span style="color:#f92672">*&lt;/span>g[i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(f,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> ans&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s[i]&lt;span style="color:#f92672">=&lt;/span>f[XD&lt;span style="color:#f92672">-&lt;/span>i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>invf[i]&lt;span style="color:#f92672">%&lt;/span>p&lt;span style="color:#f92672">*&lt;/span>(i&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">?&lt;/span>p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t[i]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">C&lt;/span>(d,i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(s,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(t,N,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>N;&lt;span style="color:#f92672">++&lt;/span>i)f[i]&lt;span style="color:#f92672">=&lt;/span>s[i]&lt;span style="color:#f92672">*&lt;/span>t[i]&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NTT&lt;/span>(f,N,&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;=&lt;/span>d;&lt;span style="color:#f92672">++&lt;/span>i){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#f92672">=&lt;/span>(ans&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(i&lt;span style="color:#f92672">+&lt;/span>i&lt;span style="color:#f92672">-&lt;/span>d,n)&lt;span style="color:#f92672">*&lt;/span>f[i])&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans&lt;span style="color:#f92672">=&lt;/span>ans&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">fpm&lt;/span>(i2,d)&lt;span style="color:#f92672">%&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">write&lt;/span>(ans,&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Two Sum Problem</title><link>https://breylaude.com/blog/2019-08-25-two-sum-problem/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-08-25-two-sum-problem/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Given an &lt;code>array(array)&lt;/code> and a &lt;code>number(sum)&lt;/code>, find the two numbers from the array that sums up the given number.&lt;/p>
&lt;p>Example: array : &lt;code>[1,2,6,5,8,9,17,10]&lt;/code> , sum : &lt;code>12&lt;/code>&lt;/p>
&lt;p>Answer for above example would be &lt;code>[2,10]&lt;/code>, if no such numbers found return &lt;code>[-1,-1]&lt;/code>.&lt;/p>
&lt;p>The approach to solve the given problem is to loop through the given array twice and make a simple check. If the sum of the numbers (first &amp;amp; second loop) is equal to the given sum, the code snippet below will make it clearer.&lt;/p></description></item><item><title>Kruskal Greedy algorithm for Minimum spanning tree</title><link>https://breylaude.com/blog/2019-06-04-kruskal-greedy-algorithm-for-minimum-spanning-tree/</link><pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2019-06-04-kruskal-greedy-algorithm-for-minimum-spanning-tree/</guid><description>&lt;p>The code that follows was written before. To do it, I created a straightforward linked list + insert using a queued linked list and then sorting it was my original plan, but it proved to be too complicated.&lt;/p>
&lt;p>Simply insert the sort so that the tail is very slight. It serves no purpose and, when used in the tree list, appears more NC. Actually, it is better to use &lt;em>heap&lt;/em> or &lt;em>qsort&lt;/em> after all input has been received, and to dynamically allocate enough space based on the input &lt;code>n&lt;/code>.&lt;/p></description></item><item><title>Static typing vs. Dynamic typing</title><link>https://breylaude.com/blog/2018-08-03-static-typing-vs.-dynamic-typing/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-08-03-static-typing-vs.-dynamic-typing/</guid><description>&lt;p>Static typing. I suppose dynamic types are fine if you’re hacking together a small tool. But static (strong, preferably HM-inferred) typing allows you to reason about your program much more powerfully.&lt;/p>
&lt;p>Correctness by construction, enforced by the compiler, is a good thing. I used to write a lot of unit tests; now I write many fewer, and instead I write my code closer to the ideal of &lt;em>“if it compiles, it runs correctly”&lt;/em>.&lt;/p></description></item><item><title>Strange thing about Clang/GCC</title><link>https://breylaude.com/blog/2018-06-05-strange-thing-about-clang/gcc/</link><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-06-05-strange-thing-about-clang/gcc/</guid><description>&lt;p>Consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;type_traits&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// base template
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;T&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// specialization 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T, &lt;span style="color:#66d9ef">size_t&lt;/span> N&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>T[N]&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;T[&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> N &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// specialization 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>template &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int[0]&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x[] &lt;span style="color:#f92672">=&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> what_type&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">remove_reference_t&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">decltype&lt;/span>(x)&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>()();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Difficulties with C++ Lambdas</title><link>https://breylaude.com/blog/2018-06-02-difficulties-with-c-lambdas/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-06-02-difficulties-with-c-lambdas/</guid><description>&lt;p>C++ lambdas are wonderful for all sorts of reasons (especially with their C++14-and-beyond power). But I’ve run into a problem that I can’t think of a good way around yet.&lt;/p>
&lt;p>If you are familiar with C++, you are aware of the importance of move semantics and rvalue references. Currently, a plethora of blog posts, conference videos, and even books explain how they operate, as well as how forwarding references (previously called universal references) combine with std::forward and templates to offer nice, optimal handling of objects with move semantics.&lt;/p></description></item><item><title>Recursive lambdas</title><link>https://breylaude.com/blog/2018-05-21-recursive-lambdas/</link><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-05-21-recursive-lambdas/</guid><description>&lt;p>One can assign a lambda to auto or to &lt;code>std::function&lt;/code>. Normally one would assign a lambda to auto to avoid possible unwanted allocation from &lt;code>std::function&lt;/code>. But if you want recursion, you need to be able to refer to the lambda variable inside the lambda, and you can’t do that if it’s assigned to auto. So how do you do recursive lambdas without using &lt;code>std::function&lt;/code>?&lt;/p>
&lt;p>Use a fixed-point combinator (y-combinator) of course.&lt;/p></description></item><item><title>Google Code Jam 2018</title><link>https://breylaude.com/blog/2018-04-27-google-code-jam-2018/</link><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-04-27-google-code-jam-2018/</guid><description>&lt;p>Codejam is using a different system and rules than before. I&amp;rsquo;m not sure if I want to participate in the contest. I know how to solve problem A , but I can&amp;rsquo;t find a vital bit of info about the new rules like the CPU of the servers where the codes are supposed to run.&lt;/p>
&lt;p>However, this suspiciously sound like one of those badly made ACM contests.&lt;/p>
&lt;p>I no longer have so much free time as before. I barely have time in the weekends to rest. So a Saturday is not something I can just spend in some contest if it doesn&amp;rsquo;t sound at least a bit challenging. And the prizes are as low as ever. I decide that atleast for Friday I&amp;rsquo;m not gonna bother.&lt;/p></description></item><item><title>C++ Tuples missing functionality</title><link>https://breylaude.com/blog/2018-04-16-c-tuples-missing-functionality/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2018-04-16-c-tuples-missing-functionality/</guid><description>&lt;p>C++ provides a strange mix of compile-time and runtime functionality for dealing with tuples. There are some interesting parts, like &lt;code>std::tie&lt;/code> to destructure a tuple, and &lt;code>std::tuple_cat&lt;/code> to join together several tuples into one.&lt;/p>
&lt;p>So there is evidence that the standard has been influenced by some functional programming ideas, but I don’t think the full power of tuples has been realized (in both senses), and I found myself thinking about some missing parts.&lt;/p></description></item><item><title>Getting Started with Hugo</title><link>https://breylaude.com/blog/2014-04-02-getting-started-with-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2014-04-02-getting-started-with-hugo/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Goto 
&lt;a href="https://github.com/spf13/hugo/releases" target="_blank" rel="noopener">hugo releases&lt;/a> and download the
appropriate version for your os and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at 
&lt;a href="https://breylaude.com/overview/installing/">installing hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the 
&lt;a href="http://github.com/spf13/hugo" target="_blank" rel="noopener">hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p></description></item><item><title>test</title><link>https://breylaude.com/blog/2014-04-02-test/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2014-04-02-test/</guid><description>&lt;p>Hugo uses the excellent 
&lt;a href="http://golang.org/" target="_blank" rel="noopener">go&lt;/a> 
&lt;a href="http://golang.org/pkg/html/template/" target="_blank" rel="noopener">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p>
&lt;p>This document is a brief primer on using go templates. The 
&lt;a href="http://golang.org/pkg/html/template/" target="_blank" rel="noopener">go docs&lt;/a>
provide more details.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://breylaude.com/blog/2014-03-10-migrate-to-hugo-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://breylaude.com/blog/2014-03-10-migrate-to-hugo-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
 ▾ images/
 logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
 ▾ static/
 ▾ images/
 logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p></description></item></channel></rss>